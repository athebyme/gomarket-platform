version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:14
    container_name: product-service-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-product_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - product-service-network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    container_name: product-service-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - product-service-network
    restart: unless-stopped

  # Kafka (и ZooKeeper)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: product-service-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - product-service-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: product-service-kafka
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - product-service-network
    restart: unless-stopped

  # Kafka UI для администрирования
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: product-service-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - product-service-network
    restart: unless-stopped

  # Jaeger для распределенной трассировки
  jaeger:
    image: jaegertracing/all-in-one:1.42
    container_name: product-service-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
    networks:
      - product-service-network
    restart: unless-stopped

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: product-service-prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - product-service-network
    restart: unless-stopped

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:9.4.3
    container_name: product-service-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: 'false'
    networks:
      - product-service-network
    restart: unless-stopped

  product-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: product-service:latest
    container_name: product-service-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy  # Изменено с service_started на service_healthy
    ports:
      - "${API_PORT:-8081}:8080"
    environment:
      SERVICE_TYPE: api
      APP_ENV: ${APP_ENV:-development}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DBNAME: ${POSTGRES_DB:-product_db}
      POSTGRES_SSLMODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
      KAFKA_BROKERS: kafka:29092
      KAFKA_GROUP_ID: product-service
      TRACING_ENABLED: 'true'
      TRACING_ENDPOINT: jaeger:6831
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s
    networks:
      - product-service-network
    restart: unless-stopped

    # Воркер продуктового сервиса
  product-worker:
      build:
        context: .
        dockerfile: Dockerfile
      image: product-service:latest
      container_name: product-service-worker
      depends_on:
        postgres:
          condition: service_healthy
        redis:
          condition: service_healthy
        kafka:
          condition: service_healthy  # Изменено с service_started на service_healthy
      environment:
        SERVICE_TYPE: worker
        APP_ENV: ${APP_ENV:-development}
        LOG_LEVEL: ${LOG_LEVEL:-debug}
        POSTGRES_HOST: postgres
        POSTGRES_PORT: 5432
        POSTGRES_USER: ${POSTGRES_USER:-postgres}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
        POSTGRES_DBNAME: ${POSTGRES_DB:-product_db}
        POSTGRES_SSLMODE: disable
        REDIS_HOST: redis
        REDIS_PORT: 6379
        REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
        KAFKA_BROKERS: kafka:29092
        KAFKA_GROUP_ID: product-service-worker
        TRACING_ENABLED: 'true'
        TRACING_ENDPOINT: jaeger:6831
      networks:
        - product-service-network
      restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  product-service-network:
    driver: bridge